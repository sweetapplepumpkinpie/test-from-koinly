import { BaseSyntheticEvent, useEffect, useState } from "react"
import Head from "next/head"
import Button from "react-bootstrap/Button"
import Alert from "react-bootstrap/Alert"
import { connect, Socket } from "socket.io-client"

import { IGameData, IGameStatus, Mark } from "@/types"

export default function Home() {
  const [me, setMe] = useState<string | undefined>()
  const [msg, setMsg] = useState<string | undefined>()
  const [winner, setWinner] = useState<string | undefined>()
  const [socket, setSocket] = useState<Socket>()
  const [gameData, setGameData] = useState<IGameData | undefined>()
  const [show, setShow] = useState(false)

  useEffect(() => {
    const socket = connect("/", {
      path: "/api/socketio",
    })

    socket.on("connect", () => {
      setMe(socket.id)
    })

    setSocket(socket)
  }, [])

  socket?.on("gameData", (gameData: IGameData) => {
    setGameData(gameData)
    if (gameData.winner) {
      setWinner(gameData.winner)
    }
    if (winner && !gameData.winner) {
      setWinner(undefined)
    }
  })

  socket?.on("alert", (msg: string) => {
    setMsg(msg)
    setShow(true)
    setTimeout(() => {
      setShow(false)
      setMsg(undefined)
    }, 5000)
  })

  const sendReset = () => {
    socket?.emit("reset")
  }

  const handleClick = (event: BaseSyntheticEvent) => {
    if (!winner) {
      const { target } = event
      const row = parseInt(target.getAttribute("data-index"))
      const col = parseInt(target.getAttribute("data-col-index"))
      const gameStatus: IGameStatus = { row, col, turn: me }

      socket?.emit("updateStatus", gameStatus)
    }
  }

  return (
    <div>
      <Head>
        <title>Tic Tac Toe</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='pt-5'>
        {winner && (
          <div className='text-center'>
            {winner === me ? "Winner" : "Loser"}
          </div>
        )}
        <div className='d-flex justify-content-center'>
          <div className='d-flex flex-column mx-auto mt-5'>
            {Array.from({ length: 3 })
              .fill(1)
              .map((_, index) => {
                return (
                  <div key={`row-${index}`} className='d-flex'>
                    {Array.from({ length: 3 })
                      .fill(1)
                      .map((_, colIndex) => (
                        <div
                          key={`col-${colIndex}`}
                          className='position-relative border w-10 h-10 d-flex align-items-center justify-content-center'
                        >
                          <div
                            className='position-absolute h-100 w-100 z-4'
                            data-index={index}
                            data-col-index={colIndex}
                            onClick={handleClick}
                          ></div>
                          {gameData?.grid[index * 3 + colIndex] ? (
                            <i
                              className={`position-relative z-1 bi bi-${
                                gameData.grid[index * 3 + colIndex] === 1
                                  ? Mark.CIRCLE
                                  : Mark.X
                              } fs-3`}
                            ></i>
                          ) : (
                            ""
                          )}
                        </div>
                      ))}
                  </div>
                )
              })}
            {show && (
              <Alert
                variant='danger'
                className='mt-5'
                onClose={() => setShow(false)}
                dismissible
              >
                <Alert.Heading>{msg}</Alert.Heading>
              </Alert>
            )}
            <Button className='mt-5' onClick={sendReset}>
              Reset game
            </Button>
          </div>
        </div>
      </main>
    </div>
  )
}
